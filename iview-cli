#!/usr/bin/env python

import sys, getopt, urllib2
import iview.comm
import iview.fetch

def usage():
	print("""usage:
	-i, --index		prints the iView index (number is the series ID)
	-s, --series <id>	get the list of episodes for the series
	-p, --programme		prints the entire iView programme at once
				(warning: very slow!)
	-d, --download <url>	download an episode
				(pass the url you got from -s or -p)
	-o, --output		specify a file to output to (use - for stdout)

	-a, --print-auth	print debug iView auth information
	-h, --help		this page""")

def config():
	try:
		iview.comm.get_config()
	except urllib2.HTTPError, error:
		print 'Error: could not retrieve an important configuration file from iView.'
		print 'Please make sure you are connected to the Internet.\n'
		print 'If iView works fine in your web browser, the iView API has possibly changed.' \
		      'Try to find an updated version of this program or contact the author.'
		print '\nDebug: could not load URL', error.url
		sys.exit(1)

def programme():
	"""	Downloads the iView index, and then prints each item in all series.
		This is a slow function. Using index() and subsequently cherrypicking
		a series to pass to series() is much faster.
	"""
	config()
	index = iview.comm.get_index()

	for series in index:
		print series['title'] + ':'

		items = iview.comm.get_series_items(series['id'])

		for item in items:
			print '\t' + item['title'] + '\t(' + item['url'] + ')'

def index():
	"""	Downloads the iView index, and prints the corresponding series and IDs.
	"""
	config()
	index = iview.comm.get_index()

	for series in index:
		print series['id'] + '\t' + series['title']

def series(series_id):
	config()
	items = iview.comm.get_series_items(series_id)

	for item in items:
		print item['title'] + '\t(' + item['url'] + ')'

def print_auth():
	auth = iview.comm.get_auth()
	print 'iView auth data:'
	print '\tToken:', auth['token']
	print '\tRTMP URL:', auth['rtmp_url']
	print '\tUnmetered:', str(auth['free'])

def download(url, output=None):
	config()
	iview.fetch.fetch_program(url, execvp=True, dest_file=output)

try:
	opts, args = getopt.getopt(sys.argv[1:],
		'cd:pis:o:ah',
		['cache', 'download=', 'programme', 'program', 'index', 'series=', 'output=', 'print-auth', 'help'])
	if not len(opts) > 0:
		raise getopt.GetoptError('Not enough arguments')
except getopt.GetoptError, err:
	usage()
	sys.exit(2)

download_arg = None
output_arg = None

try:
	for o, a in opts:
		if o in ('-c', '--cache'):
			iview.comm.cache = True
		if o in ('-p', '--programme', '--program'):
			programme()
		if o in ('-i', '--index'):
			index()
		if o in ('-s', '--series'):
			series(a)
		elif o in ('-a', '--print-auth'):
			print_auth()
		elif o in ('-d', '--download'):
			download_arg = a
		elif o in ('-o', '--output'):
			output_arg = a
		elif o in ('-h', '--help'):
			usage()
			sys.exit(2)
except KeyboardInterrupt: # don't traceback on a Ctrl+C
	pass

if download_arg is not None:
	download(download_arg, output_arg)
